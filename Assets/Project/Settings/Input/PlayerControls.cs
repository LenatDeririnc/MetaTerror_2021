//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/Project/Settings/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Organizer"",
            ""id"": ""2ef2ad95-1f71-4fec-9dd3-5b61484bfcee"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""8e443397-3190-4ef5-b80e-ed646193c015"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""4c19853b-6cb7-4aca-8d8c-87071a3adea0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""4ded87de-3f6b-419b-9d73-efc0a14152a8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""a9a01dfd-014e-4f58-a68b-7f4021f4d95a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9a23b6cc-541d-4231-bea6-98220392ee08"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""645c90dc-9863-4d05-809c-15ab358c60f2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4a0448e6-1dfa-4e08-8a98-8246ef5c6802"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""54a48057-f729-4d08-b897-dbe087224a7d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""cef9d773-5a04-4635-86cd-c3296e2963be"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.1,y=-0.1)"",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eae18bb7-6e45-41c3-ba43-ba3ea32f66c6"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bdb90ace-f1fe-40fa-8047-a56078580fde"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""VRPlayer"",
            ""id"": ""8feda545-2e96-4a7d-b182-5dbbb2e4f66e"",
            ""actions"": [
                {
                    ""name"": ""Recenter"",
                    ""type"": ""Button"",
                    ""id"": ""0c9f4b4c-3e05-475e-af13-b0f356fdf187"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dfe33a9b-d0c0-4ae5-9c8f-451114e95dc3"",
                    ""path"": ""<OpenVROculusTouchController>/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Recenter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c2c43cf-8e4c-4c1b-ba60-910e1eafa4d9"",
                    ""path"": ""<WMRSpatialController>/touchpadClicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Recenter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Organizer
        m_Organizer = asset.FindActionMap("Organizer", throwIfNotFound: true);
        m_Organizer_Movement = m_Organizer.FindAction("Movement", throwIfNotFound: true);
        m_Organizer_Look = m_Organizer.FindAction("Look", throwIfNotFound: true);
        m_Organizer_Interact = m_Organizer.FindAction("Interact", throwIfNotFound: true);
        // VRPlayer
        m_VRPlayer = asset.FindActionMap("VRPlayer", throwIfNotFound: true);
        m_VRPlayer_Recenter = m_VRPlayer.FindAction("Recenter", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Organizer
    private readonly InputActionMap m_Organizer;
    private IOrganizerActions m_OrganizerActionsCallbackInterface;
    private readonly InputAction m_Organizer_Movement;
    private readonly InputAction m_Organizer_Look;
    private readonly InputAction m_Organizer_Interact;
    public struct OrganizerActions
    {
        private @PlayerControls m_Wrapper;
        public OrganizerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Organizer_Movement;
        public InputAction @Look => m_Wrapper.m_Organizer_Look;
        public InputAction @Interact => m_Wrapper.m_Organizer_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Organizer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OrganizerActions set) { return set.Get(); }
        public void SetCallbacks(IOrganizerActions instance)
        {
            if (m_Wrapper.m_OrganizerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_OrganizerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_OrganizerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_OrganizerActionsCallbackInterface.OnMovement;
                @Look.started -= m_Wrapper.m_OrganizerActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_OrganizerActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_OrganizerActionsCallbackInterface.OnLook;
                @Interact.started -= m_Wrapper.m_OrganizerActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_OrganizerActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_OrganizerActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_OrganizerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public OrganizerActions @Organizer => new OrganizerActions(this);

    // VRPlayer
    private readonly InputActionMap m_VRPlayer;
    private IVRPlayerActions m_VRPlayerActionsCallbackInterface;
    private readonly InputAction m_VRPlayer_Recenter;
    public struct VRPlayerActions
    {
        private @PlayerControls m_Wrapper;
        public VRPlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Recenter => m_Wrapper.m_VRPlayer_Recenter;
        public InputActionMap Get() { return m_Wrapper.m_VRPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VRPlayerActions set) { return set.Get(); }
        public void SetCallbacks(IVRPlayerActions instance)
        {
            if (m_Wrapper.m_VRPlayerActionsCallbackInterface != null)
            {
                @Recenter.started -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRecenter;
                @Recenter.performed -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRecenter;
                @Recenter.canceled -= m_Wrapper.m_VRPlayerActionsCallbackInterface.OnRecenter;
            }
            m_Wrapper.m_VRPlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Recenter.started += instance.OnRecenter;
                @Recenter.performed += instance.OnRecenter;
                @Recenter.canceled += instance.OnRecenter;
            }
        }
    }
    public VRPlayerActions @VRPlayer => new VRPlayerActions(this);
    public interface IOrganizerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IVRPlayerActions
    {
        void OnRecenter(InputAction.CallbackContext context);
    }
}
